#
#   SEGA SATURN Graphic library make file for GNU
#
# slightly modified for ISO building, COFF toolchain

# specify on command line
# OBJFMT = coff
 OBJFMT = elf

# macro
AS = sh-$(OBJFMT)-as
CC = sh-$(OBJFMT)-gcc
CXX = sh-$(OBJFMT)-g++
CONV = sh-$(OBJFMT)-objcopy
RM = rm

# directory
SGLDIR = C:/SaturnOrbit/SGL_302j
SGLIDR = $(SGLDIR)/inc
SGLLDR = $(SGLDIR)/lib_elf

CMNDIR = l:/saturn/dev/wolf3ddma/root 

# source_program
SRCS = sega/saturn/low.s sega/saturn/saturn.c sega/saturn/pcmsys.c signon.c sega/saturn/workarea.c id_ca.c id_crt.c id_in.c id_pm.c id_sd.c id_vl.c id_vh.c id_us.c wl_agent.c wl_act1.c wl_act2.c wl_atmos.c wl_debug.c wl_cloudsky.c wl_draw.c wl_game.c wl_play.c wl_menu.c wl_state.c wl_shade.c wl_inter.c wl_text.c wl_main.c wl_utils.c wl_plane.c wl_parallax.c wl_plane.c

OBJS = $(filter %.o, $(SRCS:.s=.o) $(SRCS:.c=.o) $(SRCS:.cpp=.o))

LIBS = C:/SaturnOrbit/SGL_302j/LIB_ELF/libsgl_real_elf.a \
l:/saturn/SBL6/SEGALIB/GFS/elf/gfs2.o \
l:/saturn/SBL6/SEGALIB/GFS/elf/gfs_cdb2.o \
l:/saturn/SBL6/SEGALIB/GFS/elf/gfs_cdc2.o \
l:/saturn/SBL6/SEGALIB/GFS/elf/gfs_cdf2.o \
l:/saturn/SBL6/SEGALIB/GFS/elf/gfs_trn2.o \
l:/saturn/SBL6/SEGALIB/GFS/elf/gfs_buf2.o \
l:/saturn/SBL6/SEGALIB/GFS/elf/gfs_dir2.o \
L:/saturn/SBL6/SEGALIB/LIB/vbtelf2/sega_mth.a \
L:/saturn/SBL6/SEGALIB/LIB/vbtelf2/sega_dma.a \
L:/saturn/SBL6/SEGALIB/LIB/vbtelf2/sega_int.a \
L:/saturn/SBL6/SEGALIB/LIB/vbtelf2/sega_sys.a \
L:/saturn/SBL6/SEGALIB/LIB/vbtelf4/cdcrep.a

# option
#CCFLAGS = -O2 -m2 -g -c -I$(SGLIDR)
# -fomit-frame-pointer -fsort-data 
#CCFLAGS = -O2 -m2 -Wno-narrowing -fuse-linker-plugin -fno-web -fno-gcse -fno-unit-at-a-time -fomit-frame-pointer -flto
#CCFLAGS = -O2 -m2 -Wno-narrowing -fno-web -fno-gcse -fno-unit-at-a-time -fomit-frame-pointer -fpermissive -fno-lto -fno-builtin

CCFLAGS =  -fpermissive -Os -m2 -falign-functions=4 -Wformat-diag -Wno-conversion-null -Wshadow -Wall -Wswitch -Wpadded -fno-common -Wextra -Wno-narrowing -fno-web -fno-builtin -funit-at-a-time -Wwrite-strings -Wl,--strip-all -Wl,--verbose -mno-fsrra -maccumulate-outgoing-args -fomit-frame-pointer -D_SH -DMODEL_S -DSEGA_SATURN $(CFLAGS) -std=gnu99 -Werror-implicit-function-declaration -Wimplicit-int Wsequence-point -lm -lc -lgcc -I$(SGLIDR) 

# -m2 must be specified in LDFLAGS so the linker will search the SH2 lib dirs
# Specify path of libsgl.a by using "-L" option

#LDFLAGS = -O2 -m2  -fuse-linker-plugin  -Xlinker -n -Xlinker -flto -Xlinker -T$(LDFILE) -Xlinker -Map \
#          -Xlinker $(MPFILE) -Xlinker -e -Xlinker ___Start -Xlinker -S -nostartfiles 
LDFLAGS = -m2 -Xlinker -n -Xlinker -T$(LDFILE) -Xlinker -Map -Xlinker $(MPFILE) -Xlinker -e -Xlinker ___Start -Xlinker -S -nostartfiles -nostartfiles -LL:/GNUSHV12/sh-elf/sh-elf/lib/m2/libc.a -LC:/SaturnOrbit/SGL_302j/LIB_ELF/LIBSGL.A 

TARGET   = root/sl.coff
TARGET1  = root/sl.bin
MPFILE   = $(TARGET:.coff=.maps)
IPFILE   = $(CMNDIR)/IP.BIN
LDFILE   = root/SL.LNK
MAKEFILE = makefile


all: $(TARGET) $(TARGET1)

# Use gcc to link so it will automagically find correct libs directory

$(TARGET) : $(SYSOBJS) $(OBJS) $(MAKEFILE) $(LDFILE) #$(OBJECTS)
	$(CC) $(LDFLAGS) $(SYSOBJS) $(OBJS) $(LIBS) -o $@

$(TARGET1) : $(SYSOBJS) $(OBJS) $(MAKEFILE) $(LDFILE)
	$(CONV) -O binary $(TARGET) $(TARGET1)

#$(LDFILE) : $(MAKEFILE)
#	@echo Making $(LDFILE)
#	@echo SECTIONS {		> $@
#	@echo 	SLSTART 0x06004000 : {	>> $@
#	@echo 		___Start = .;	>> $@
#	@echo 		*(SLSTART)	>> $@
#	@echo 	}			>> $@
#	@echo 	.text ALIGN(0x20) :			>> $@
#	@echo 	{			>> $@
#	@echo 		* (.text)			>> $@
#	@echo 		*(.strings)			>> $@
#	@echo 		__etext = .;			>> $@
#	@echo 	}			>> $@
#	@echo 	SLPROG ALIGN(0x20): {	>> $@
#	@echo 		__slprog_start = .;	>> $@
#	@echo 		*(SLPROG)	>> $@
#	@echo 		__slprog_end = .;	>> $@
#	@echo 	}			>> $@
#	@echo 	.tors  ALIGN(0x10) :			>> $@
#	@echo 	{			>> $@
#	@echo 		___ctors = . ;			>> $@
#	@echo 		*(.ctors)			>> $@
#	@echo 		___ctors_end = . ;			>> $@
#	@echo 		___dtors = . ;			>> $@
#	@echo 		*(.dtors)			>> $@
#	@echo 		___dtors_end = . ;			>> $@
#	@echo 	}			>> $@
#	@echo 	.data ALIGN(0x10):			>> $@
#	@echo 	{			>> $@
#	@echo 		* (.data)			>> $@
#	@echo 		_edata = . ;			>> $@
#	@echo 	}			>> $@
#	@echo 	.bss ALIGN(0x10) (NOLOAD):			>> $@
#	@echo 	{			>> $@
#	@echo 		__bstart = . ;			>> $@
#	@echo 		*(.bss)			>> $@
#	@echo 		* ( COMMON )			>> $@
#	@echo 		__bend = . ;			>> $@
#	@echo 	_end = .;			>> $@
#	@echo 	}			>> $@
#	@echo }				>> $@

# suffix
.SUFFIXES: .asm

.s.o:
	$(AS) $< $(ASFLAGS) $(_ASFLAGS) -o $@

.c.o:
	$(CC) $< $(DFLAGS) $(CCFLAGS) $(_CCFLAGS) -o $@
.cpp.o:
	$(CXX) $< $(DFLAGS) $(CCFLAGS) $(_CCFLAGS) -o $@

clean:
	$(RM) $(OBJS) $(TARGET) $(TARGET1) $(TARGET2) $(MPFILE) cd/0.bin













