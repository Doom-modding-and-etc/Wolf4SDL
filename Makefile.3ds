.PHONY: $(BUILD) clean all
ifeq ($(strip $(DEVKITARM)),)
$(error "Please set DEVKITARM in your environment. export DEVKITARM=<path to>devkitARM")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITARM)/3ds_rules

APP_TITLE = Wolf4SDL
APP_DESCRIPTION := Cross Plataform Source Port Of Wolfenstein 3d for Nintendo 3ds by: hax0kartik and Adopted by: Wolf3s
APP_AUTHOR := Wolf3s, hax0kartik, Aryan, Mortriz Ripper and The other contribuitors
APP_VERSION := 2.2
ICON := icon/wolf4sdl.png
WINDRES   = windres.exe
OBJ       = aud_sys/mame/fmopl.o aud_sys/dosbox/dbopl.o id_ca.o id_crt.o id_in.o id_pm.o id_sd.o id_us.o id_vh.o id_vieasm.o id_vl.o id_w3swrap.o psnprntf.o signon.o wl_act1.o wl_act2.o wl_agent.o wl_atmos.o wl_cloudsky.o wl_debug.o wl_draw.o wl_inter.o wl_game.o wl_main.o wl_menu.o wl_parallax.o wl_plane.o wl_play.o wl_scale.o wl_shade.o wl_state.o wl_text.o wl_utils.o
LINKOBJ   = aud_sys/mame/fmopl.o aud_sys/dosbox/dbopl.o id_ca.o id_crt.o id_in.o id_pm.o id_sd.o id_us.o id_vh.o id_vieasm.o id_vl.o id_w3swrap.o psnprntf.o signon.o wl_act1.o wl_act2.o wl_agent.o wl_atmos.o wl_cloudsky.o wl_debug.o wl_draw.o wl_inter.o wl_game.o wl_main.o wl_menu.o wl_parallax.o wl_plane.o wl_play.o wl_scale.o wl_shade.o wl_state.o wl_text.o wl_utils.o
CTRUINCS = -I$(DEVKITPRO)/libctru/include -I$(DEVKITPRO)/libctru/include/3ds
INCS      = $(CTRUINCS) -I$(DEVKITPRO)/portlibs/3ds/include -I$(DEVKITPRO)/portlibs/3ds/include/SDL -I$(DEVKITPRO)/portlibs/3ds
DEFINES   = -DN3DS -D__3DS__ 
LIBDIR    = -L$(DEVKITPRO)/libctru/lib -L$(DEVKITPRO)/portlibs/3ds/lib
LIBS      = $(LIBDIR) -lSDL_mixer -lvorbisidec -lmikmod -lmad -logg -lSDL_ttf -lSDL_image -lSDL_gfx -lSDL -lfreetype -lpng -ljpeg -lz -lm -lcitro3d -lctru `sdl-config --libs` -lstdc++ 
BIN       = Wolf4SDL.elf
BUILD	  =	build
ARCH 	  = -march=armv6k -mtune=mpcore -mfloat-abi=hard -mtp=soft -marm -mthumb-interwork
CFLAGS    = $(ARCH) $(INCS) $(DEFINES) \
			-Wno-narrowing -Ofast -mword-relocations \
			-fomit-frame-pointer -ffunction-sections \
			-std=gnu99 -Wall `sdl-config --libs` -Wall -W -g \
			-Wpointer-arith -Wreturn-type -Wwrite-strings \
			-Wcast-align -Wimplicit-int -Wsequence-point
ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=3dsx.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map) 
RM        = rm -f
LINK      = arm-none-eabi-gcc-12.2.0
C		  = arm-none-eabi-gcc-12.2.0
OUTPUT    = $(APP_TITLE)

#--------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.png)
	ifneq (,$(findstring $(TARGET).png,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).png
	else
		ifneq (,$(findstring icon.png,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.png
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_SMDH)),)
	export _3DSXFLAGS += --smdh=$(CURDIR)/$(TARGET).smdh
endif

ifneq ($(ROMFS),)
	export _3DSXFLAGS += --romfs=$(CURDIR)/$(ROMFS)
endif

ifeq ($(strip $(NO_3DSX)),)
	export _3DSXFLAGS += --nacp=$(OUTPUT).3dsx
endif

ifneq ($(APP_TITLEID),)
	export _3DSXFLAGS += --titleid=$(APP_TITLEID)
endif

ifneq ($(ROMFS),)
	export _3DSXFLAGS += --romfsdir=$(ROMFS)
endif

ifneq ($(ROMFS),)
	export _3DSXFLAGS += --romfs=$(CURDIR)/$(ROMFS)
endif

$(BIN): $(OBJ)
	$(LINK) $(LINKOBJ) -o "Wolf4SDL.elf" $(LIBS)

aud_sys/mame/fmopl.o: $(GLOBALDEPS) aud_sys/mame/fmopl.c aud_sys/mame/fmopl.h 
	$(C) -c aud_sys/mame/fmopl.c -o aud_sys/mame/fmopl.o $(CFLAGS)

aud_sys/dosbox/dbopl.o: $(GLOBALDEPS) aud_sys/dosbox/dbopl.c aud_sys/dosbox/dbopl.h 
	$(C) -c aud_sys/dosbox/dbopl.c -o aud_sys/dosbox/dbopl.o $(CFLAGS)

id_ca.o: $(GLOBALDEPS) id_ca.c wl_def.h 
	$(C) -c id_ca.c -o id_ca.o $(CFLAGS)	

id_in.o: $(GLOBALDEPS) id_in.c wl_def.h
	$(C) -c id_in.c -o id_in.o $(CFLAGS)	

id_pm.o: $(GLOBALDEPS) id_pm.c wl_def.h
	$(C) -c id_pm.c -o id_pm.o $(CFLAGS)	 

id_sd.o: $(GLOBALDEPS) id_sd.c wl_def.h
	$(C) -c id_sd.c -o id_sd.o $(CFLAGS) 	

id_us.o: $(GLOBALDEPS) id_us.c wl_def.h 
	$(C) -c id_us.c -o id_us.o $(CFLAGS)	

id_vh.o: $(GLOBALDEPS) id_vh.c wl_def.h
	$(C) -c id_vh.c -o id_vh.o $(CFLAGS)
	
id_vieasm.o: $(GLOBALDEPS) id_vieasm.c id_vieasm.h
	$(C) -c id_vieasm.c -o id_vieasm.o $(CFLAGS) 	
	
id_vl.o: $(GLOBALDEPS) id_vl.c wl_def.h 
	$(C) -c id_vl.c -o id_vl.o $(CFLAGS)	
	
id_w3swrap.o: $(GLOBALDEPS) id_w3swrap.c id_w3swrap.h wl_def.h 
	$(C) -c id_w3swrap.c -o id_w3swrap.o $(CFLAGS)			
		
psnprntf.o: $(GLOBALDEPS) psnprntf.c psnprntf.h wl_def.h 
	$(C) -c psnprntf.c -o psnprntf.o $(CFLAGS)		

signon.o: $(GLOBALDEPS) signon.c wl_def.h
	$(C) -c signon.c -o signon.o $(CFLAGS) 
	
wl_act1.o: $(GLOBALDEPS) wl_act1.c wl_def.h
	$(C) -c wl_act1.c -o wl_act1.o $(CFLAGS)

wl_act2.o: $(GLOBALDEPS) wl_act2.c wl_def.h
	$(C) -c wl_act2.c -o wl_act2.o $(CFLAGS)

wl_atmos.o: $(GLOBALDEPS) wl_atmos.c wl_def.h
	$(C) -c wl_atmos.c -o wl_atmos.o $(CFLAGS)

wl_agent.o: $(GLOBALDEPS) wl_agent.c wl_def.h
	$(C) -c wl_agent.c -o wl_agent.o $(CFLAGS)
	
wl_cloudsky.o: $(GLOBALDEPS) wl_cloudsky.c wl_def.h 
	$(C) -c wl_cloudsky.c -o wl_cloudsky.o $(CFLAGS)

wl_debug.o: $(GLOBALDEPS) wl_debug.c wl_def.h  
	$(C) -c wl_debug.c -o wl_debug.o $(CFLAGS)
	
wl_draw.o: $(GLOBALDEPS) wl_draw.c wl_def.h 
	$(C) -c wl_draw.c -o wl_draw.o $(CFLAGS)
	
wl_game.o: $(GLOBALDEPS) wl_game.c wl_def.h 
	$(C) -c wl_game.c -o wl_game.o $(CFLAGS)

wl_inter.o: $(GLOBALDEPS) wl_inter.c wl_def.h 
	$(C) -c wl_inter.c -o wl_inter.o $(CFLAGS)	
	
wl_main.o: $(GLOBALDEPS) wl_main.c wl_def.h 
	$(C) -c wl_main.c -o wl_main.o $(CFLAGS)	
	
wl_menu.o: $(GLOBALDEPS) wl_menu.c wl_def.h 
	$(C) -c wl_menu.c -o wl_menu.o $(CFLAGS)	

wl_parallax.o: $(GLOBALDEPS) wl_parallax.c wl_def.h 
	$(C) -c wl_parallax.c -o wl_parallax.o $(CFLAGS)

wl_plane.o: $(GLOBALDEPS) wl_plane.c wl_def.h 
	$(C) -c wl_plane.c -o wl_plane.o $(CFLAGS)

wl_play.o: $(GLOBALDEPS) wl_play.c wl_def.h 
	$(C) -c wl_play.c -o wl_play.o $(CFLAGS)

wl_scale.o: $(GLOBALDEPS) wl_scale.c wl_def.h 
	$(C) -c wl_scale.c -o wl_scale.o $(CFLAGS)

wl_shade.o: $(GLOBALDEPS) wl_shade.c wl_def.h
	$(C) -c wl_shade.c -o wl_shade.o $(CFLAGS)

wl_state.o: $(GLOBALDEPS) wl_state.c wl_def.h 
	$(C) -c wl_state.c -o wl_state.o $(CFLAGS)

wl_text.o: $(GLOBALDEPS) wl_text.c wl_def.h
	$(C) -c wl_text.c -o wl_text.o $(CFLAGS)
	
wl_utils.o: $(GLOBALDEPS) wl_utils.c wl_def.h 
	$(C) -c wl_utils.c -o wl_utils.o $(CFLAGS)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
all	:	$(OUTPUT).3dsx $(OUTPUT).elf
ifeq ($(strip $(NO_SMDH)),)
$(OUTPUT).3dsx	:	$(OUTPUT).elf $(OUTPUT).smdh
else
$(OUTPUT).3dsx	:	$(OUTPUT).elf
endif

clean: 
	$(RM) $(OBJ) $(BIN)